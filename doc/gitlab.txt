*gitlab.nvim*

*gitlab.txt*                      GitLab functionality inside of Neovim.

CONTENTS                                        *gitlab-contents*
Introduction                                    |gitlab-introduction|
Usage                                           |gitlab-usage|
  Commands                                      |gitlab-commands|
  Completions                                   |gitlab-completions|
API                                             |gitlab-api|

                                      Type |gO| to see the table of contents.

==============================================================================
INTRODUCTION                                             *gitlab-introduction*

`gitlab.vim` integrates GitLab functionality into Neovim.

==============================================================================
USAGE                                                           *gitlab-usage*

Use |gitlab.setup()| to configure `gitlab.vim`. Example: >lua

    require('gitlab').setup({
      code_suggestions = {
      },
    })
<

==============================================================================
  COMPLETIONS                                             *gitlab-completions*

                                                     *gitlab-code-suggestions*
`gitlab.vim` includes functions to configure the builtin Neovim |lsp| client
configuration to use the GitLab Duo Code Suggestions language server.

1. |gitlab.code_suggestions.start|
2. |gitlab.code_suggestions.stop|

1. |GitLabCodeSuggestionsStart|
2. |GitLabCodeSuggestionsStop|

You can use the |GitLabBootstrapCodeSuggestions| command to configure
completions through GitLab Duo Code Suggestions.

Example: >lua

    -- Use Omni completion's popup menu
    vim.o.completeopt = 'menu,menuone'
<

vim.g.gitlab_plugin_loaded                        *vim.g.gitlab_plugin_loaded*

Skips plugin execution if true preventing re-running setup functions.

vim.g.gitlab_autoload                                  *vim.g.gitlab_autoload*

Prevent automatically calling |gitlab.setup()| being invoked with default
options.

==============================================================================
  COMMANDS                                                   *gitlab-commands*

GitLabBootstrapCodeSuggestions                *GitLabBootstrapCodeSuggestions*

    1. Install the language server.
    2. Prompt for a personal access token (PAT) with the `api` scope.
    3. Register the provided PAT with the local language server.
    4. Start an LSP client automatically for supported filetypes binding
       |'omnifunc'| with the builtin Neovim LSP client.

==============================================================================
API                                                               *gitlab-api*

`gitlab.vim` provides the following public Lua API:


gitlab.setup({options})                                       *gitlab.setup()*

    Invokes setup on nested GitLab plugin modules passing through their
    relevant options.

    Example: >lua

    require('gitlab').setup({
      code_suggestions = {
        auto_filetypes = {'ruby'},
      }
    })
<

    Parameters: ~
      • {options} (table) Optional keyword arguments:
                  • code_suggestions (table) options to pass into
                  |gitlab.code_suggestions.setup()|

gitlab.code_suggestions.setup({options})     *gitlab.code_suggestions.setup()*

    Configures |gitlab-completions|.

    Example: >lua

    require('gitlab').setup({
      code_suggestions = {
        auto_filetypes = {'ruby'},
      }
    })
<

    Parameters: ~
      • {options} (table) Optional keyword arguments:
                  • |code_suggestions| (table) options for customizing the
                    GitLab Duo Code Suggestions.

                                      *gl_opt-code_suggestions*
                                      *gl_opt-code_suggestions.auto_filetypes*
auto_filetypes

Example: >lua

    `{ 'python', 'ruby', ..., }`
<
A list of different filetypes to enable the builtin Neovim |'omnifunc'|.

gitlab.options.code_suggestions.enabled
Example: >lua

    `true`
<
Whether to enable Code Suggestions via the LSP binary.

gitlab.options.code_suggestions.language_server_version
The release tag of the language server for use in
`GitLabBootstrapCodeSuggestions`.

Example: >lua

    `nil`
<

gitlab.options.code_suggestions.lsp_binary_path

The path where the language server binary is available or should be installed
to.

Example: >lua

    `vim.env.GITLAB_VIM_LSP_BINARY_PATH`

vim:tw=78:ts=8:ft=help:norl:
